---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# python-project-metadata-action
name: '🛠️ Python Project Metadata'
description: 'Extracts Python project metadata from repository'

inputs:
  # Optional
  path_prefix:
    description: 'Directory location containing project code'
    type: 'string'
    required: false
    default: '.'

outputs:
  python_project_file:
    description: "File used to define/describe the project"
    # Currently supported: pyproject.toml|setup.py
    value: ${{ steps.project-name.outputs.python_project_file }}
  python_project_name:
    description: "The name of the Python project"
    value: ${{ steps.project-name.outputs.python_project_name }}
  versioning_type:
    description: "Project supported Python versions as JSON"
    value: ${{ steps.versioning.outputs.type }}
  python_project_version:
    description: "The version of the Python project"
    value: ${{ steps.project-version.outputs.python_project_version }}
  python_package_name:
    # Note: dashes in the name are replaced with underscores
    description: "The name of the Python package"
    value: ${{ steps.project-name.outputs.python_package_name }}
  project_match_package:
    description: "Set true when the project name and package name match"
    value: ${{ steps.compare.outputs.project_match_package }}
  project_match_repo:
    description: "Set true when the project name and repository name match"
    value: ${{ steps.compare.outputs.project_match_repo }}
  matrix_json:
    description: "Project supported Python versions as JSON"
    value: ${{ steps.supported-python-versions.outputs.matrix_json }}
  build_python_version:
    description: "Python version to use for build (creates artefacts)"
    value: "${{ steps.supported-python-versions.outputs.build_python }}"

runs:
  using: 'composite'
  steps:
    - name: 'Setup action/environment'
      shell: bash
      run: |
        # Setup action/environment

        # Verify path_prefix a valid directory path
        if [ ! -d "${{ inputs.path_prefix }}" ]; then
          echo 'Error: invalid path/prefix to project directory ❌'; exit 1
        fi

    - name: 'Extract Python project name'
      id: project-name
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/python-project-name-action@8711a5e8206beb42a73f95460972e2ea80b5f946 # v0.1.3
      with:
        path_prefix: "${{ inputs.path_prefix }}"

    - name: 'Check if pyproject.toml uses dynamic versioning'
      id: dyn-check
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/python-dynamic-version-action@757278a7dce3add2c777305e7ec61d9e2b97ed7e # v0.1.6
      with:
        path_prefix: "${{ inputs.path_prefix }}"

    - name: 'Determine versioning type [static|dynamic]'
      id: versioning
      shell: bash
      run: |
        # Determine versioning type [static|dynamic]
        if [ "${{ steps.dyn-check.outputs.dynamic_version }}" = 'true' ]; then
          echo "type=dynamic" >> "$GITHUB_ENV"
          echo "type=dynamic" >> "$GITHUB_OUTPUT"
        else
          echo 'Static versioning enabled ✅'
          echo "type=static" >> "$GITHUB_ENV"
          echo "type=static" >> "$GITHUB_OUTPUT"
        fi

    - name: 'Extract Python project version'
      if: steps.dyn-check.outputs.dynamic_version == 'false'
      id: project-version
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/python-project-version-action@9c74e1e9686c9b16cc8e5ba3621efe616703d965 # v0.1.4
      with:
        path_prefix: "${{ inputs.path_prefix }}"

    - name: 'Compare project and package/repository names'
      id: compare
      shell: bash
      run: |
        # Compare project and package names
        if [ "${{ steps.project-name.outputs.python_project_name }}" = \
          "${{ steps.project-name.outputs.python_package_name }}" ]; then
          names_match='true'
          echo 'Project and package names are identical ✅'
        else
          names_match='false'
          echo 'Project and package names are NOT identical ⚠️'
        fi
        echo "project_match_package=$names_match" >> "$GITHUB_ENV"
        echo "project_match_package=$names_match" >> "$GITHUB_OUTPUT"

        # Compare project and repository names
        REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}
        if [ "${{ steps.project-name.outputs.python_project_name }}" = \
          "$REPO_NAME" ]; then
          names_match="true"
          echo 'Project and repository names are identical ✅'
        else
          names_match='true'
          echo 'Project and repository names are NOT identical ⚠️'
        fi
        echo "project_match_repo=$names_match" >> "$GITHUB_ENV"
        echo "project_match_repo=$names_match" >> "$GITHUB_OUTPUT"

    - name: 'Get project supported Python versions'
      id: supported-python-versions
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/python-supported-versions-action@14c5f9025a652062849adb771ff75da771886732 # v0.1.6
      with:
        path_prefix: "${{ inputs.path_prefix }}"

    - name: 'Display summary output'
      shell: bash
      # yamllint disable rule:line-length
      run: |
        # Display summary output

        # Set displayed value based on static or dynamic versioning
        if [ "${{ steps.versioning.outputs.type }}" = "dynamic" ]; then
          DISPLAY_VERSION='dynamic'
        else
          DISPLAY_VERSION="${{ steps.project-version.outputs.python_project_version }}"
        fi

        echo '### Project Information' >> "$GITHUB_STEP_SUMMARY"

        echo '| Key | Value |' >> "$GITHUB_STEP_SUMMARY"
        echo '| ----------------- | ------- |' >> "$GITHUB_STEP_SUMMARY"
        echo "| Metadata source | ${{ steps.project-name.outputs.python_project_file }} |" >> "$GITHUB_STEP_SUMMARY"
        echo "| Project name | ${{ steps.project-name.outputs.python_project_name }} |" >> "$GITHUB_STEP_SUMMARY"
        echo "| Project version | "$DISPLAY_VERSION" |" >> "$GITHUB_STEP_SUMMARY"
        echo "| Package name | ${{ steps.project-name.outputs.python_package_name }} |" >> "$GITHUB_STEP_SUMMARY"
        echo "| Build Python | ${{ steps.supported-python-versions.outputs.build_python }} |" >> "$GITHUB_STEP_SUMMARY"
        echo "| Matrix JSON | ${{ steps.supported-python-versions.outputs.matrix_json }} |" >> "$GITHUB_STEP_SUMMARY"
        if [ "${{ steps.project-toml.outputs.type }}" = "file" ]; then
          echo "| Dynamic versioning | ${{ steps.dynamic-versioning.outputs.dynamic_version }} |" >> "$GITHUB_STEP_SUMMARY"
        fi
